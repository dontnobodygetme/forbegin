# - обычный комментарий на одну строку
# обычный вывод на экран
print("")
# задание переменной(в названии переменной не допускаются специальные символы(кроме знака подчеркивания))
some = ("phone")
# В пайтоне применяется два типа наименования переменных: camel case и underscore notation.
# Camel case подразумевает, что каждое новое подслово в наименовании переменной начинается с большой буквы. Например:
userName = "Tom"
# Underscore notation подразумевает, что подслова в наименовании переменной разделяются знаком подчеркивания. Например:
user_name = "Tom"
# Питон регистрозависимый язык, поэтому:
name = Tom # одна переменная 
Name = Tom # другая переменная
# int Тип int представляет целое число, например, 1, 4, 8, 50.
nine = 9
# float Тип float представляет число с плавающей точкой, например, 1.2 или 34.76.
money = 22.5
# str(string) это строка 
# При этом если строка имеет много символов, ее можем разбить ее на части и разместить их на разных строках кода. В этом случае вся строка заключается в круглые скобки, а ее отдельные части - в кавычки:
text = ("Привет"
    "друг")
print(text)
# Если же мы хотим определить многострочный текст, то такой текст заключается в тройные двойные или одинарные кавычки
# При использовани тройных одинарных кавычек не стоит путать их с комментариями: если текст в тройных одинарных кавычках присваивается переменной, то это строка, а не комментарий.
# myname = "Alexander"
# bool Тип bool представляет два логических значения: True (верно, истина) или False (неверно, ложь).
status = False
# Тип complex представляет комплексные числа в формате вещественная_часть+мнимая_частьj - после мнимой части указывается суффикс j
complexNumber = 1+2j
print(complexNumber)   # (1+2j)
"""масштабный
 комментарий"""
# вывод переменной 
print(status)
# удаление переменной((на момент выполнения строки))
del status 
# пример тайпкастинга (#float->>>#str)
print("Привет, у меня"+str(money)+"!")
# пример двойного тайпкастинга
name = "amanek"
age = "22"
weight = 64
print(name + str(weight + int(age)))
# для кавычек в тексте при выводе
print('Наша компания "Аквамарин"')
# второй вариант
print("Наша компания \"Аквамарин\"")
# перенос на строку отдельной части текста
print("Текст на первой строке \nтекст на второй строке")
# символ для большого пробела(пробел складывается)
print("Сейчас будет большой пробел \t текст продолжается")
# r(ставится перед строкой) от слова raw , т. е r – это сырые строки (необработанные строки). Нужны для того, чтобы слеш \ не вызывал экранирование символов. Популярные примеры \n , \t .
text = r"C:Python\name.txt"
# Python позволяет встравивать в строку значения других переменных. Для этого внутри строки переменные размещаются в фигурных скобках {}, а перед всей строкой ставится символ f:
userName = "Alex"
userAge = 23
user = f"name: {userName} age: {userAge}"
# Стоит учитывать, что все введенные значения рассматриваются как значения типа str, то есть строки. И даже если мы вводим число, как в втором случае в коде выше, то Python все равно будет рассматривать введенное значение как строку, а не как число.
print(user)
# С помощью встроенной функции type() динамически можно узнать текущий тип переменной:
name = "abc"
print(type(name))
name = 123
print(type(name))
# end - задание конца строки( в примере получается оба текста на одной)
print("Привет, товарищ", end="")
print("Привет")
# Важно знать, что не задавая конец строки он по умолчанию будет равен end="\n"
# То есть для того чтобы вывести текст, который задан на разных строчках, достаточно задать пустой конец строки для n-1 строчек(n-количество строчек),в данном случае я задал конец строки как "пробел"
print("Hello World", end=" ")
print("Hello friend", end=" ")
print("Hello Python")
# sep - задание символа между разными данными в текст(чек пример)
print("Привет, мир",5, "Привет", sep="!")
# (текст с несколькими переменными)
name = "Александр"
weather = "Солнечно"
money = 12415.2
print("Привет, меня зовут "+name)
print("На улице "+weather +",а у меня в кармане "+str(money)+"$")
# f-строки(оптимизированный вариант с несколькими переменными)P.S. АВТОТАЙПКАСТИНГ
print(f"Привет,{name}, у тебя в кармане {money}$")
# input
weight = input("Введите ваш вес:")
print(f"Ваше вес: {weight}")
# import
import random
print(random.randint(121, 12121))
# математические операции +, -, *, /, //(Данная операция возвращает целочисленный результат деления, отбрасывая дробную часть), **, %(Получение остатка от деления), унарный минус, округлени, Пи
print(5+5)
a=11
b=1321
# 
# округление(до ближайшего четного числа)P.S. FLOOR- В МЕНЬШУЮ, CEIL- В БОЛЬШУЮ
x=4.5
print(round(x))
# также с делением например
 print(round(5 / 3))
# 
import math
x=26316.1
print(math.pi)
# 
num1 = 5
# Ряд специальных операций позволяют использовать присвоить результат операции первому операнду:
# num1 += 5 будет эквивалентно num1 = num 1+5 (также с -,*,/,%)
# Ряд специальных операций позволяют использовать присвоить результат операции первому операнду:
# += Присвоение результата сложения
# -= Присвоение результата вычитания
# *= Присвоение результата умножения
# /= Присвоение результата от деления
# //=Присвоение результата целочисленного деления
# **= Присвоение степени числа
# %= Присвоение остатка от деления
max() максимальное
# 
abs() модуль
# 
pow(5, 6) степень (5 в 6 степени)
# По умолчанию стандартные числа расцениваются как числа в десятичной системе. Но Python также поддерживает числа в двоичной, восьмеричной и шестнадцатеричной системах.
# Для указания, что число представляет двоичную систему, перед числом ставится префикс 0b:
# Для указания, что число представляет восьмеричную систему, перед числом ставится префикс 0o:
# Для указания, что число представляет шестнадцатеричную систему, перед числом ставится префикс 0x:
# В какой-бы системе мы не передали число в функцию print для вывода на консоль, оно по умолчанию будет выводиться в десятичной системе.